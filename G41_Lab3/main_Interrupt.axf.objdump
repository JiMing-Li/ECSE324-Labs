
C:/Users/jimin/OneDrive - McGill University/324/G41_Lab3/G41_Lab3/main_Interrupt.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	58 09 00 00 64 09 00 00 70 09 00 00 7c 09 00 00     X...d...p...|...
  30:	88 09 00 00 40 13 00 00 00 08 00 00 94 09 00 00     ....@...........

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000480 	bl	12dc <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001430 	.word	0x00001430

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001868 	.word	0x00001868

00000124 <__cs3_heap_start_ptr>:
     124:	00001890 	.word	0x00001890

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001870 	.word	0x00001870
     170:	00001873 	.word	0x00001873
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001870 	.word	0x00001870
     1bc:	00001870 	.word	0x00001870
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001870 	.word	0x00001870
     200:	00000000 	.word	0x00000000
     204:	000013cc 	.word	0x000013cc

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000013cc 	.word	0x000013cc
     250:	00001874 	.word	0x00001874
     254:	00001430 	.word	0x00001430
     258:	00000000 	.word	0x00000000

0000025c <main>:
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/HPS_TIM.h"
#include "./drivers/inc/pushbuttons.h"


int main(){
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd040 	sub	sp, sp, #64	; 0x40

	int_setup(2, (int[]){73, 199});
     268:	e30133d0 	movw	r3, #5072	; 0x13d0
     26c:	e3403000 	movt	r3, #0
     270:	e24b201c 	sub	r2, r11, #28
     274:	e8930003 	ldm	r3, {r0, r1}
     278:	e8820003 	stm	r2, {r0, r1}
     27c:	e24b301c 	sub	r3, r11, #28
     280:	e3a00002 	mov	r0, #2
     284:	e1a01003 	mov	r1, r3
     288:	eb0001d0 	bl	9d0 <int_setup>
	int count10MS = 0, countS = 0, countM = 0;
     28c:	e3a03000 	mov	r3, #0
     290:	e50b3008 	str	r3, [r11, #-8]
     294:	e3a03000 	mov	r3, #0
     298:	e50b300c 	str	r3, [r11, #-12]
     29c:	e3a03000 	mov	r3, #0
     2a0:	e50b3010 	str	r3, [r11, #-16]

	HPS_TIM_config_t hps_tim;
	HPS_TIM_config_t hps_edge;

	hps_tim.tim = TIM0;
     2a4:	e3a03001 	mov	r3, #1
     2a8:	e54b3030 	strb	r3, [r11, #-48]	; 0xffffffd0
	hps_tim.timeout = 10000;
     2ac:	e3023710 	movw	r3, #10000	; 0x2710
     2b0:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
	hps_tim.LD_en = 1;
     2b4:	e3a03001 	mov	r3, #1
     2b8:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	hps_tim.INT_en = 1;
     2bc:	e3a03001 	mov	r3, #1
     2c0:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	hps_tim.enable = 0;
     2c4:	e3a03000 	mov	r3, #0
     2c8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0

	hps_edge.tim = TIM2;
     2cc:	e3a03004 	mov	r3, #4
     2d0:	e54b3044 	strb	r3, [r11, #-68]	; 0xffffffbc
	hps_edge.timeout = 5000;
     2d4:	e3013388 	movw	r3, #5000	; 0x1388
     2d8:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
	hps_edge.LD_en = 1;
     2dc:	e3a03001 	mov	r3, #1
     2e0:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
	hps_edge.INT_en = 1;
     2e4:	e3a03001 	mov	r3, #1
     2e8:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
	hps_edge.enable = 0;
     2ec:	e3a03000 	mov	r3, #0
     2f0:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc

	int option = -1;
     2f4:	e3e03000 	mvn	r3, #0
     2f8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	

	HPS_TIM_config_ASM(&hps_tim);
     2fc:	e24b3030 	sub	r3, r11, #48	; 0x30
     300:	e1a00003 	mov	r0, r3
     304:	eb00024a 	bl	c34 <HPS_TIM_config_ASM>
	HPS_TIM_config_ASM(&hps_edge);
     308:	e24b3044 	sub	r3, r11, #68	; 0x44
     30c:	e1a00003 	mov	r0, r3
     310:	eb000247 	bl	c34 <HPS_TIM_config_ASM>

	enable_PB_INT_ASM(PB0);
     314:	e3a00001 	mov	r0, #1
     318:	eb000317 	bl	f7c <enable_PB_INT_ASM>
     31c:	ea000000 	b	324 <main+0xc8>
			HEX_write_ASM(HEX2, countS % 10);
			HEX_write_ASM(HEX3, countS / 10);
			HEX_write_ASM(HEX4, countM % 10);
			HEX_write_ASM(HEX5, countM / 10);
		}
	}
     320:	e1a00000 	nop			; (mov r0, r0)
	HPS_TIM_config_ASM(&hps_edge);

	enable_PB_INT_ASM(PB0);

	while(1){
		if(PB_data_is_pressed_ASM(PB0)){
     324:	e3a00001 	mov	r0, #1
     328:	eb000301 	bl	f34 <PB_data_is_pressed_ASM>
     32c:	e1a03000 	mov	r3, r0
     330:	e3530000 	cmp	r3, #0
     334:	0a000006 	beq	354 <main+0xf8>
			hps_edge.enable = 1;
     338:	e3a03001 	mov	r3, #1
     33c:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
			HPS_TIM_config_ASM(&hps_edge);
     340:	e24b3044 	sub	r3, r11, #68	; 0x44
     344:	e1a00003 	mov	r0, r3
     348:	eb000239 	bl	c34 <HPS_TIM_config_ASM>
			option = 0;
     34c:	e3a03000 	mov	r3, #0
     350:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
		}
		if(PB_data_is_pressed_ASM(PB1)){
     354:	e3a00002 	mov	r0, #2
     358:	eb0002f5 	bl	f34 <PB_data_is_pressed_ASM>
     35c:	e1a03000 	mov	r3, r0
     360:	e3530000 	cmp	r3, #0
     364:	0a000006 	beq	384 <main+0x128>
		hps_edge.enable = 1;
     368:	e3a03001 	mov	r3, #1
     36c:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
		HPS_TIM_config_ASM(&hps_edge);
     370:	e24b3044 	sub	r3, r11, #68	; 0x44
     374:	e1a00003 	mov	r0, r3
     378:	eb00022d 	bl	c34 <HPS_TIM_config_ASM>
		option = 1;
     37c:	e3a03001 	mov	r3, #1
     380:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
		}
		if(PB_data_is_pressed_ASM(PB2)){
     384:	e3a00004 	mov	r0, #4
     388:	eb0002e9 	bl	f34 <PB_data_is_pressed_ASM>
     38c:	e1a03000 	mov	r3, r0
     390:	e3530000 	cmp	r3, #0
     394:	0a000006 	beq	3b4 <main+0x158>
		hps_edge.enable = 1;
     398:	e3a03001 	mov	r3, #1
     39c:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
		HPS_TIM_config_ASM(&hps_edge);
     3a0:	e24b3044 	sub	r3, r11, #68	; 0x44
     3a4:	e1a00003 	mov	r0, r3
     3a8:	eb000221 	bl	c34 <HPS_TIM_config_ASM>
		option = 2;
     3ac:	e3a03002 	mov	r3, #2
     3b0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
		}
		if(HPS_TIM_read_INT_ASM(TIM2)){
     3b4:	e3a00004 	mov	r0, #4
     3b8:	eb00026b 	bl	d6c <HPS_TIM_read_INT_ASM>
     3bc:	e1a03000 	mov	r3, r0
     3c0:	e3530000 	cmp	r3, #0
     3c4:	0a000023 	beq	458 <main+0x1fc>
			HPS_TIM_clear_INT_ASM(TIM2);
     3c8:	e3a00004 	mov	r0, #4
     3cc:	eb000285 	bl	de8 <HPS_TIM_clear_INT_ASM>
			hps_edge.enable = 0;
     3d0:	e3a03000 	mov	r3, #0
     3d4:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
			HPS_TIM_config_ASM(&hps_edge);
     3d8:	e24b3044 	sub	r3, r11, #68	; 0x44
     3dc:	e1a00003 	mov	r0, r3
     3e0:	eb000213 	bl	c34 <HPS_TIM_config_ASM>
			switch(option){
     3e4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     3e8:	e3530001 	cmp	r3, #1
     3ec:	0a000009 	beq	418 <main+0x1bc>
     3f0:	e3530002 	cmp	r3, #2
     3f4:	0a00000d 	beq	430 <main+0x1d4>
     3f8:	e3530000 	cmp	r3, #0
     3fc:	1a000015 	bne	458 <main+0x1fc>
				case 0:
					hps_tim.enable = 1;
     400:	e3a03001 	mov	r3, #1
     404:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
					HPS_TIM_config_ASM(&hps_tim);
     408:	e24b3030 	sub	r3, r11, #48	; 0x30
     40c:	e1a00003 	mov	r0, r3
     410:	eb000207 	bl	c34 <HPS_TIM_config_ASM>
					break;
     414:	ea00000f 	b	458 <main+0x1fc>
				case 1:
					hps_tim.enable = 0;
     418:	e3a03000 	mov	r3, #0
     41c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
					HPS_TIM_config_ASM(&hps_tim);
     420:	e24b3030 	sub	r3, r11, #48	; 0x30
     424:	e1a00003 	mov	r0, r3
     428:	eb000201 	bl	c34 <HPS_TIM_config_ASM>
					break;
     42c:	ea000009 	b	458 <main+0x1fc>
				case 2:		
					count10MS = 0;
     430:	e3a03000 	mov	r3, #0
     434:	e50b3008 	str	r3, [r11, #-8]
					countS = 0;
     438:	e3a03000 	mov	r3, #0
     43c:	e50b300c 	str	r3, [r11, #-12]
					countM = 0;
     440:	e3a03000 	mov	r3, #0
     444:	e50b3010 	str	r3, [r11, #-16]
					HEX_write_ASM( HEX0 | HEX1 | HEX2 | HEX3 | HEX4| HEX5, 0);
     448:	e3a0003f 	mov	r0, #63	; 0x3f
     44c:	e3a01000 	mov	r1, #0
     450:	eb0001a6 	bl	af0 <HEX_write_ASM>
					break;
     454:	e1a00000 	nop			; (mov r0, r0)

			}
		}

				if(hps_tim0_int_flag) {
     458:	e3003eb0 	movw	r3, #3760	; 0xeb0
     45c:	e3403000 	movt	r3, #0
     460:	e5933000 	ldr	r3, [r3]
     464:	e3530000 	cmp	r3, #0
     468:	0affffac 	beq	320 <main+0xc4>
			hps_tim0_int_flag = 0;
     46c:	e3003eb0 	movw	r3, #3760	; 0xeb0
     470:	e3403000 	movt	r3, #0
     474:	e3a02000 	mov	r2, #0
     478:	e5832000 	str	r2, [r3]
				if(++count10MS == 100){
     47c:	e51b3008 	ldr	r3, [r11, #-8]
     480:	e2833001 	add	r3, r3, #1
     484:	e50b3008 	str	r3, [r11, #-8]
     488:	e51b3008 	ldr	r3, [r11, #-8]
     48c:	e3530064 	cmp	r3, #100	; 0x64
     490:	1a000004 	bne	4a8 <main+0x24c>
					count10MS = 0;
     494:	e3a03000 	mov	r3, #0
     498:	e50b3008 	str	r3, [r11, #-8]
					++countS;
     49c:	e51b300c 	ldr	r3, [r11, #-12]
     4a0:	e2833001 	add	r3, r3, #1
     4a4:	e50b300c 	str	r3, [r11, #-12]
				}
				if(countS == 60){
     4a8:	e51b300c 	ldr	r3, [r11, #-12]
     4ac:	e353003c 	cmp	r3, #60	; 0x3c
     4b0:	1a000004 	bne	4c8 <main+0x26c>
					countS = 0;
     4b4:	e3a03000 	mov	r3, #0
     4b8:	e50b300c 	str	r3, [r11, #-12]
					++countM;
     4bc:	e51b3010 	ldr	r3, [r11, #-16]
     4c0:	e2833001 	add	r3, r3, #1
     4c4:	e50b3010 	str	r3, [r11, #-16]
				}
				if(countM == 60){
     4c8:	e51b3010 	ldr	r3, [r11, #-16]
     4cc:	e353003c 	cmp	r3, #60	; 0x3c
     4d0:	1a000001 	bne	4dc <main+0x280>
					countM = 0;
     4d4:	e3a03000 	mov	r3, #0
     4d8:	e50b3010 	str	r3, [r11, #-16]
				}
			HEX_write_ASM(HEX0, count10MS % 10);
     4dc:	e51b1008 	ldr	r1, [r11, #-8]
     4e0:	e3063667 	movw	r3, #26215	; 0x6667
     4e4:	e3463666 	movt	r3, #26214	; 0x6666
     4e8:	e0c32193 	smull	r2, r3, r3, r1
     4ec:	e1a02143 	asr	r2, r3, #2
     4f0:	e1a03fc1 	asr	r3, r1, #31
     4f4:	e0632002 	rsb	r2, r3, r2
     4f8:	e1a03002 	mov	r3, r2
     4fc:	e1a03103 	lsl	r3, r3, #2
     500:	e0833002 	add	r3, r3, r2
     504:	e1a03083 	lsl	r3, r3, #1
     508:	e0632001 	rsb	r2, r3, r1
     50c:	e6ef3072 	uxtb	r3, r2
     510:	e3a00001 	mov	r0, #1
     514:	e1a01003 	mov	r1, r3
     518:	eb000174 	bl	af0 <HEX_write_ASM>
			HEX_write_ASM(HEX1, count10MS / 10);
     51c:	e51b2008 	ldr	r2, [r11, #-8]
     520:	e3063667 	movw	r3, #26215	; 0x6667
     524:	e3463666 	movt	r3, #26214	; 0x6666
     528:	e0c31293 	smull	r1, r3, r3, r2
     52c:	e1a01143 	asr	r1, r3, #2
     530:	e1a03fc2 	asr	r3, r2, #31
     534:	e0633001 	rsb	r3, r3, r1
     538:	e6ef3073 	uxtb	r3, r3
     53c:	e3a00002 	mov	r0, #2
     540:	e1a01003 	mov	r1, r3
     544:	eb000169 	bl	af0 <HEX_write_ASM>
			HEX_write_ASM(HEX2, countS % 10);
     548:	e51b100c 	ldr	r1, [r11, #-12]
     54c:	e3063667 	movw	r3, #26215	; 0x6667
     550:	e3463666 	movt	r3, #26214	; 0x6666
     554:	e0c32193 	smull	r2, r3, r3, r1
     558:	e1a02143 	asr	r2, r3, #2
     55c:	e1a03fc1 	asr	r3, r1, #31
     560:	e0632002 	rsb	r2, r3, r2
     564:	e1a03002 	mov	r3, r2
     568:	e1a03103 	lsl	r3, r3, #2
     56c:	e0833002 	add	r3, r3, r2
     570:	e1a03083 	lsl	r3, r3, #1
     574:	e0632001 	rsb	r2, r3, r1
     578:	e6ef3072 	uxtb	r3, r2
     57c:	e3a00004 	mov	r0, #4
     580:	e1a01003 	mov	r1, r3
     584:	eb000159 	bl	af0 <HEX_write_ASM>
			HEX_write_ASM(HEX3, countS / 10);
     588:	e51b200c 	ldr	r2, [r11, #-12]
     58c:	e3063667 	movw	r3, #26215	; 0x6667
     590:	e3463666 	movt	r3, #26214	; 0x6666
     594:	e0c31293 	smull	r1, r3, r3, r2
     598:	e1a01143 	asr	r1, r3, #2
     59c:	e1a03fc2 	asr	r3, r2, #31
     5a0:	e0633001 	rsb	r3, r3, r1
     5a4:	e6ef3073 	uxtb	r3, r3
     5a8:	e3a00008 	mov	r0, #8
     5ac:	e1a01003 	mov	r1, r3
     5b0:	eb00014e 	bl	af0 <HEX_write_ASM>
			HEX_write_ASM(HEX4, countM % 10);
     5b4:	e51b1010 	ldr	r1, [r11, #-16]
     5b8:	e3063667 	movw	r3, #26215	; 0x6667
     5bc:	e3463666 	movt	r3, #26214	; 0x6666
     5c0:	e0c32193 	smull	r2, r3, r3, r1
     5c4:	e1a02143 	asr	r2, r3, #2
     5c8:	e1a03fc1 	asr	r3, r1, #31
     5cc:	e0632002 	rsb	r2, r3, r2
     5d0:	e1a03002 	mov	r3, r2
     5d4:	e1a03103 	lsl	r3, r3, #2
     5d8:	e0833002 	add	r3, r3, r2
     5dc:	e1a03083 	lsl	r3, r3, #1
     5e0:	e0632001 	rsb	r2, r3, r1
     5e4:	e6ef3072 	uxtb	r3, r2
     5e8:	e3a00010 	mov	r0, #16
     5ec:	e1a01003 	mov	r1, r3
     5f0:	eb00013e 	bl	af0 <HEX_write_ASM>
			HEX_write_ASM(HEX5, countM / 10);
     5f4:	e51b2010 	ldr	r2, [r11, #-16]
     5f8:	e3063667 	movw	r3, #26215	; 0x6667
     5fc:	e3463666 	movt	r3, #26214	; 0x6666
     600:	e0c31293 	smull	r1, r3, r3, r2
     604:	e1a01143 	asr	r1, r3, #2
     608:	e1a03fc2 	asr	r3, r2, #31
     60c:	e0633001 	rsb	r3, r3, r1
     610:	e6ef3073 	uxtb	r3, r3
     614:	e3a00020 	mov	r0, #32
     618:	e1a01003 	mov	r1, r3
     61c:	eb000133 	bl	af0 <HEX_write_ASM>
		}
	}
     620:	eaffff3e 	b	320 <main+0xc4>

00000624 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     624:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     628:	e28db000 	add	r11, sp, #0
     62c:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     630:	e3a030d3 	mov	r3, #211	; 0xd3
     634:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     638:	e51b3008 	ldr	r3, [r11, #-8]
     63c:	e129f003 	msr	CPSR_fc, r3
}
     640:	e28bd000 	add	sp, r11, #0
     644:	e8bd0800 	ldmfd	sp!, {r11}
     648:	e12fff1e 	bx	lr

0000064c <enable_A9_interrupts>:

void enable_A9_interrupts() {
     64c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     650:	e28db000 	add	r11, sp, #0
     654:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     658:	e3a03053 	mov	r3, #83	; 0x53
     65c:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     660:	e51b3008 	ldr	r3, [r11, #-8]
     664:	e129f003 	msr	CPSR_fc, r3
}
     668:	e28bd000 	add	sp, r11, #0
     66c:	e8bd0800 	ldmfd	sp!, {r11}
     670:	e12fff1e 	bx	lr

00000674 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     674:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     678:	e28db000 	add	r11, sp, #0
     67c:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     680:	e3e03007 	mvn	r3, #7
     684:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     688:	e3a030d2 	mov	r3, #210	; 0xd2
     68c:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     690:	e51b300c 	ldr	r3, [r11, #-12]
     694:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     698:	e51b3008 	ldr	r3, [r11, #-8]
     69c:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     6a0:	e3a030d3 	mov	r3, #211	; 0xd3
     6a4:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     6a8:	e51b300c 	ldr	r3, [r11, #-12]
     6ac:	e129f003 	msr	CPSR_fc, r3
}
     6b0:	e28bd000 	add	sp, r11, #0
     6b4:	e8bd0800 	ldmfd	sp!, {r11}
     6b8:	e12fff1e 	bx	lr

000006bc <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     6bc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     6c0:	e28db000 	add	r11, sp, #0
     6c4:	e24dd01c 	sub	sp, sp, #28
     6c8:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     6cc:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     6d0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     6d4:	e1a031c3 	asr	r3, r3, #3
     6d8:	e3c33003 	bic	r3, r3, #3
     6dc:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     6e0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     6e4:	e203301f 	and	r3, r3, #31
     6e8:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     6ec:	e3a02001 	mov	r2, #1
     6f0:	e51b300c 	ldr	r3, [r11, #-12]
     6f4:	e1a03312 	lsl	r3, r2, r3
     6f8:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     6fc:	e51b3008 	ldr	r3, [r11, #-8]
     700:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     704:	e2433c03 	sub	r3, r3, #768	; 0x300
     708:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     70c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     710:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     714:	e5921000 	ldr	r1, [r2]
     718:	e51b2010 	ldr	r2, [r11, #-16]
     71c:	e1812002 	orr	r2, r1, r2
     720:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     724:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     728:	e3c33003 	bic	r3, r3, #3
     72c:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     730:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     734:	e2033003 	and	r3, r3, #3
     738:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     73c:	e51b2008 	ldr	r2, [r11, #-8]
     740:	e51b300c 	ldr	r3, [r11, #-12]
     744:	e0823003 	add	r3, r2, r3
     748:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     74c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     750:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     754:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     758:	e6ef2072 	uxtb	r2, r2
     75c:	e5c32000 	strb	r2, [r3]
}
     760:	e28bd000 	add	sp, r11, #0
     764:	e8bd0800 	ldmfd	sp!, {r11}
     768:	e12fff1e 	bx	lr

0000076c <config_GIC>:

void config_GIC(int len, int* IDs) {
     76c:	e92d4800 	push	{r11, lr}
     770:	e28db004 	add	r11, sp, #4
     774:	e24dd010 	sub	sp, sp, #16
     778:	e50b0010 	str	r0, [r11, #-16]
     77c:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     780:	e3a03000 	mov	r3, #0
     784:	e50b3008 	str	r3, [r11, #-8]
     788:	ea00000a 	b	7b8 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     78c:	e51b3008 	ldr	r3, [r11, #-8]
     790:	e1a03103 	lsl	r3, r3, #2
     794:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     798:	e0823003 	add	r3, r2, r3
     79c:	e5933000 	ldr	r3, [r3]
     7a0:	e1a00003 	mov	r0, r3
     7a4:	e3a01001 	mov	r1, #1
     7a8:	ebffffc3 	bl	6bc <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     7ac:	e51b3008 	ldr	r3, [r11, #-8]
     7b0:	e2833001 	add	r3, r3, #1
     7b4:	e50b3008 	str	r3, [r11, #-8]
     7b8:	e51b2008 	ldr	r2, [r11, #-8]
     7bc:	e51b3010 	ldr	r3, [r11, #-16]
     7c0:	e1520003 	cmp	r2, r3
     7c4:	bafffff0 	blt	78c <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     7c8:	e30c3104 	movw	r3, #49412	; 0xc104
     7cc:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     7d0:	e30f2fff 	movw	r2, #65535	; 0xffff
     7d4:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     7d8:	e3a03cc1 	mov	r3, #49408	; 0xc100
     7dc:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     7e0:	e3a02001 	mov	r2, #1
     7e4:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     7e8:	e3a03a0d 	mov	r3, #53248	; 0xd000
     7ec:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     7f0:	e3a02001 	mov	r2, #1
     7f4:	e5832000 	str	r2, [r3]
}
     7f8:	e24bd004 	sub	sp, r11, #4
     7fc:	e8bd8800 	pop	{r11, pc}

00000800 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     800:	e24ee004 	sub	lr, lr, #4
     804:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     808:	e28db018 	add	r11, sp, #24
     80c:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     810:	e30c310c 	movw	r3, #49420	; 0xc10c
     814:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     818:	e5933000 	ldr	r3, [r3]
     81c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     820:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     824:	e3530053 	cmp	r3, #83	; 0x53
     828:	0a00003d 	beq	924 <__cs3_isr_irq+0x124>
     82c:	e3530053 	cmp	r3, #83	; 0x53
     830:	ca000011 	bgt	87c <__cs3_isr_irq+0x7c>
     834:	e353004e 	cmp	r3, #78	; 0x4e
     838:	0a000031 	beq	904 <__cs3_isr_irq+0x104>
     83c:	e353004e 	cmp	r3, #78	; 0x4e
     840:	ca000006 	bgt	860 <__cs3_isr_irq+0x60>
     844:	e3530048 	cmp	r3, #72	; 0x48
     848:	0a000029 	beq	8f4 <__cs3_isr_irq+0xf4>
     84c:	e3530049 	cmp	r3, #73	; 0x49
     850:	0a000029 	beq	8fc <__cs3_isr_irq+0xfc>
     854:	e353001d 	cmp	r3, #29
     858:	0a000019 	beq	8c4 <__cs3_isr_irq+0xc4>
     85c:	ea000036 	b	93c <__cs3_isr_irq+0x13c>
     860:	e3530050 	cmp	r3, #80	; 0x50
     864:	0a00002a 	beq	914 <__cs3_isr_irq+0x114>
     868:	e3530050 	cmp	r3, #80	; 0x50
     86c:	ba000026 	blt	90c <__cs3_isr_irq+0x10c>
     870:	e3530051 	cmp	r3, #81	; 0x51
     874:	0a000028 	beq	91c <__cs3_isr_irq+0x11c>
     878:	ea00002f 	b	93c <__cs3_isr_irq+0x13c>
     87c:	e35300c7 	cmp	r3, #199	; 0xc7
     880:	0a000013 	beq	8d4 <__cs3_isr_irq+0xd4>
     884:	e35300c7 	cmp	r3, #199	; 0xc7
     888:	ca000006 	bgt	8a8 <__cs3_isr_irq+0xa8>
     88c:	e3530059 	cmp	r3, #89	; 0x59
     890:	0a000027 	beq	934 <__cs3_isr_irq+0x134>
     894:	e35300c5 	cmp	r3, #197	; 0xc5
     898:	0a00000b 	beq	8cc <__cs3_isr_irq+0xcc>
     89c:	e3530054 	cmp	r3, #84	; 0x54
     8a0:	0a000021 	beq	92c <__cs3_isr_irq+0x12c>
     8a4:	ea000024 	b	93c <__cs3_isr_irq+0x13c>
     8a8:	e35300c9 	cmp	r3, #201	; 0xc9
     8ac:	0a00000c 	beq	8e4 <__cs3_isr_irq+0xe4>
     8b0:	e35300c9 	cmp	r3, #201	; 0xc9
     8b4:	ba000008 	blt	8dc <__cs3_isr_irq+0xdc>
     8b8:	e35300ca 	cmp	r3, #202	; 0xca
     8bc:	0a00000a 	beq	8ec <__cs3_isr_irq+0xec>
     8c0:	ea00001d 	b	93c <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     8c4:	eb00017a 	bl	eb4 <A9_PRIV_TIM_ISR>
     8c8:	ea00001c 	b	940 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     8cc:	eb000179 	bl	eb8 <HPS_GPIO1_ISR>
     8d0:	ea00001a 	b	940 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     8d4:	eb000178 	bl	ebc <HPS_TIM0_ISR>
     8d8:	ea000018 	b	940 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     8dc:	eb00017e 	bl	edc <HPS_TIM1_ISR>
     8e0:	ea000016 	b	940 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     8e4:	eb00017d 	bl	ee0 <HPS_TIM2_ISR>
     8e8:	ea000014 	b	940 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     8ec:	eb00017c 	bl	ee4 <HPS_TIM3_ISR>
     8f0:	ea000012 	b	940 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     8f4:	eb00017b 	bl	ee8 <FPGA_INTERVAL_TIM_ISR>
     8f8:	ea000010 	b	940 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     8fc:	eb00017a 	bl	eec <FPGA_PB_KEYS_ISR>
     900:	ea00000e 	b	940 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     904:	eb00017d 	bl	f00 <FPGA_Audio_ISR>
     908:	ea00000c 	b	940 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     90c:	eb00017c 	bl	f04 <FPGA_PS2_ISR>
     910:	ea00000a 	b	940 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     914:	eb00017b 	bl	f08 <FPGA_JTAG_ISR>
     918:	ea000008 	b	940 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     91c:	eb00017a 	bl	f0c <FPGA_IrDA_ISR>
     920:	ea000006 	b	940 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     924:	eb000179 	bl	f10 <FPGA_JP1_ISR>
     928:	ea000004 	b	940 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     92c:	eb000178 	bl	f14 <FPGA_JP2_ISR>
     930:	ea000002 	b	940 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     934:	eb000177 	bl	f18 <FPGA_PS2_DUAL_ISR>
     938:	ea000000 	b	940 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     93c:	eafffffe 	b	93c <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     940:	e30c3110 	movw	r3, #49424	; 0xc110
     944:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     948:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     94c:	e5832000 	str	r2, [r3]
}
     950:	e24bd018 	sub	sp, r11, #24
     954:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000958 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     958:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     95c:	e28db000 	add	r11, sp, #0
	while(1);
     960:	eafffffe 	b	960 <__cs3_reset+0x8>

00000964 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     964:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     968:	e28db000 	add	r11, sp, #0
	while(1);
     96c:	eafffffe 	b	96c <__cs3_isr_undef+0x8>

00000970 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     970:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     974:	e28db000 	add	r11, sp, #0
	while(1);
     978:	eafffffe 	b	978 <__cs3_isr_swi+0x8>

0000097c <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     97c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     980:	e28db000 	add	r11, sp, #0
	while(1);
     984:	eafffffe 	b	984 <__cs3_isr_pabort+0x8>

00000988 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     988:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     98c:	e28db000 	add	r11, sp, #0
	while(1);
     990:	eafffffe 	b	990 <__cs3_isr_dabort+0x8>

00000994 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     994:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     998:	e28db000 	add	r11, sp, #0
	while(1);
     99c:	eafffffe 	b	99c <__cs3_isr_fiq+0x8>

000009a0 <fix_bug>:
}

void fix_bug() {
     9a0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     9a4:	e28db000 	add	r11, sp, #0
     9a8:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     9ac:	e30d3198 	movw	r3, #53656	; 0xd198
     9b0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     9b4:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     9b8:	e51b3008 	ldr	r3, [r11, #-8]
     9bc:	e3a02703 	mov	r2, #786432	; 0xc0000
     9c0:	e5832000 	str	r2, [r3]
}
     9c4:	e28bd000 	add	sp, r11, #0
     9c8:	e8bd0800 	ldmfd	sp!, {r11}
     9cc:	e12fff1e 	bx	lr

000009d0 <int_setup>:

void int_setup(int len, int* IDs) {
     9d0:	e92d4800 	push	{r11, lr}
     9d4:	e28db004 	add	r11, sp, #4
     9d8:	e24dd008 	sub	sp, sp, #8
     9dc:	e50b0008 	str	r0, [r11, #-8]
     9e0:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     9e4:	ebffff0e 	bl	624 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     9e8:	ebffff21 	bl	674 <set_A9_IRQ_stack>
	fix_bug();
     9ec:	ebffffeb 	bl	9a0 <fix_bug>
	config_GIC(len, IDs);
     9f0:	e51b0008 	ldr	r0, [r11, #-8]
     9f4:	e51b100c 	ldr	r1, [r11, #-12]
     9f8:	ebffff5b 	bl	76c <config_GIC>
	enable_A9_interrupts();
     9fc:	ebffff12 	bl	64c <enable_A9_interrupts>
}
     a00:	e24bd004 	sub	sp, r11, #4
     a04:	e8bd8800 	pop	{r11, pc}

00000a08 <HEX_clear_ASM>:
				.global HEX_clear_ASM
				.global HEX_flood_ASM
				.global HEX_write_ASM

HEX_clear_ASM:		
				MOV R2, #5  						//there are 6 hex
     a08:	e3a02005 	mov	r2, #5
				MOV R3, #1							//R3 store the digit to compare digit
     a0c:	e3a03001 	mov	r3, #1
				LDR R1, =HEX_BASE
     a10:	e59f1218 	ldr	r1, [pc, #536]	; c30 <WRITE_END+0x8>
				LDR R5, [R1]
     a14:	e5915000 	ldr	r5, [r1]
				MOV R6, #127 						// HEX 0
     a18:	e3a0607f 	mov	r6, #127	; 0x7f

00000a1c <CLEAR_LOOP_ONE>:
				
CLEAR_LOOP_ONE:	
						
				SUBS R2, R2, #1     				//loop through array, from 4 to 0
     a1c:	e2522001 	subs	r2, r2, #1
				BEQ CLEAR_INIT_TWO
     a20:	0a000006 	beq	a40 <CLEAR_INIT_TWO>
				TST R0, R3							//R2 store the same value as digit
     a24:	e1100003 	tst	r0, r3
				BEQ CLEAR_LOOP_ONE_SHIFT			//if R2 is 0, turn do nothing go back to loop
     a28:	0a000001 	beq	a34 <CLEAR_LOOP_ONE_SHIFT>
				BIC R5, R5, R6						//if R2 is not 0, flood the hex
     a2c:	e1c55006 	bic	r5, r5, r6
				B CLEAR_LOOP_ONE_SHIFT
     a30:	eaffffff 	b	a34 <CLEAR_LOOP_ONE_SHIFT>

00000a34 <CLEAR_LOOP_ONE_SHIFT>:
				
CLEAR_LOOP_ONE_SHIFT:
				LSL R6, R6, #8						//shift R6 by 8
     a34:	e1a06406 	lsl	r6, r6, #8
				LSL R3, R3, #1						//shift R3 by 1
     a38:	e1a03083 	lsl	r3, r3, #1
				B CLEAR_LOOP_ONE
     a3c:	eafffff6 	b	a1c <CLEAR_LOOP_ONE>

00000a40 <CLEAR_INIT_TWO>:
			
CLEAR_INIT_TWO:
				STR R5, [R1]
     a40:	e5815000 	str	r5, [r1]
				MOV R2, #3
     a44:	e3a02003 	mov	r2, #3
				LDR R5, [R1, #16]
     a48:	e5915010 	ldr	r5, [r1, #16]
				MOV R6, #127 						// HEX 4
     a4c:	e3a0607f 	mov	r6, #127	; 0x7f

00000a50 <CLEAR_LOOP_TWO>:
				
CLEAR_LOOP_TWO:	
				SUBS R2, R2, #1						//loop through array, from 4 TO 0
     a50:	e2522001 	subs	r2, r2, #1
				BEQ CLEAR_END
     a54:	0a000006 	beq	a74 <CLEAR_END>
				TST R0, R3					//R2 store the same value as digit.
     a58:	e1100003 	tst	r0, r3
				BEQ CLEAR_LOOP_TWO_SHIFT			//if R2 is 0, turn do nothing go back to loop
     a5c:	0a000001 	beq	a68 <CLEAR_LOOP_TWO_SHIFT>
				BIC R5, R5, R6					//if R2 is not 0, flood the hex
     a60:	e1c55006 	bic	r5, r5, r6
				B CLEAR_LOOP_TWO_SHIFT
     a64:	eaffffff 	b	a68 <CLEAR_LOOP_TWO_SHIFT>

00000a68 <CLEAR_LOOP_TWO_SHIFT>:

CLEAR_LOOP_TWO_SHIFT:
				LSL R6, R6, #8						//shift R6 by 8
     a68:	e1a06406 	lsl	r6, r6, #8
				LSL R3, R3, #1						//shift R3 by 1
     a6c:	e1a03083 	lsl	r3, r3, #1
				B CLEAR_LOOP_TWO
     a70:	eafffff6 	b	a50 <CLEAR_LOOP_TWO>

00000a74 <CLEAR_END>:
				
CLEAR_END:	
				STR R5, [R1, #16]
     a74:	e5815010 	str	r5, [r1, #16]
				BX LR
     a78:	e12fff1e 	bx	lr

00000a7c <HEX_flood_ASM>:
				
HEX_flood_ASM:
				MOV R2, #5  						//there are 6 hex
     a7c:	e3a02005 	mov	r2, #5
				MOV R3, #1							//R3 store the digit to compare digit
     a80:	e3a03001 	mov	r3, #1
				LDR R1, =HEX_BASE
     a84:	e59f11a4 	ldr	r1, [pc, #420]	; c30 <WRITE_END+0x8>
				LDR R5, [R1]
     a88:	e5915000 	ldr	r5, [r1]
				MOV R6, #127 						// HEX 0
     a8c:	e3a0607f 	mov	r6, #127	; 0x7f

00000a90 <FLOOD_LOOP_ONE>:
				
FLOOD_LOOP_ONE:	
						
				SUBS R2, R2, #1     				//loop through array, from 4 to 0
     a90:	e2522001 	subs	r2, r2, #1
				BEQ FLOOD_INIT_TWO
     a94:	0a000006 	beq	ab4 <FLOOD_INIT_TWO>
				TST R0, R3							//R2 store the same value as digit
     a98:	e1100003 	tst	r0, r3
				BEQ FLOOD_LOOP_ONE_SHIFT			//if R2 is 0, turn do nothing go back to loop
     a9c:	0a000001 	beq	aa8 <FLOOD_LOOP_ONE_SHIFT>
				ORR R5, R5, R6						//if R2 is not 0, flood the hex
     aa0:	e1855006 	orr	r5, r5, r6
				B FLOOD_LOOP_ONE_SHIFT
     aa4:	eaffffff 	b	aa8 <FLOOD_LOOP_ONE_SHIFT>

00000aa8 <FLOOD_LOOP_ONE_SHIFT>:
				
FLOOD_LOOP_ONE_SHIFT:
				LSL R6, R6, #8						//shift R6 by 8
     aa8:	e1a06406 	lsl	r6, r6, #8
				LSL R3, R3, #1						//shift R3 by 1
     aac:	e1a03083 	lsl	r3, r3, #1
				B FLOOD_LOOP_ONE
     ab0:	eafffff6 	b	a90 <FLOOD_LOOP_ONE>

00000ab4 <FLOOD_INIT_TWO>:
			
FLOOD_INIT_TWO:
				STR R5, [R1]
     ab4:	e5815000 	str	r5, [r1]
				MOV R2, #3
     ab8:	e3a02003 	mov	r2, #3
				LDR R5, [R1, #16]
     abc:	e5915010 	ldr	r5, [r1, #16]
				MOV R6, #127 						// HEX 4
     ac0:	e3a0607f 	mov	r6, #127	; 0x7f

00000ac4 <FLOOD_LOOP_TWO>:
				
FLOOD_LOOP_TWO:	
				SUBS R2, R2, #1						//loop through array, from 4 TO 0
     ac4:	e2522001 	subs	r2, r2, #1
				BEQ FLOOD_END
     ac8:	0a000006 	beq	ae8 <FLOOD_END>
				TST R0, R3					//R2 store the same value as digit.
     acc:	e1100003 	tst	r0, r3
				BEQ FLOOD_LOOP_TWO_SHIFT			//if R2 is 0, turn do nothing go back to loop
     ad0:	0a000001 	beq	adc <FLOOD_LOOP_TWO_SHIFT>
				ORR R5, R5, R6						//if R2 is not 0, flood the hex
     ad4:	e1855006 	orr	r5, r5, r6
				B FLOOD_LOOP_TWO_SHIFT
     ad8:	eaffffff 	b	adc <FLOOD_LOOP_TWO_SHIFT>

00000adc <FLOOD_LOOP_TWO_SHIFT>:

FLOOD_LOOP_TWO_SHIFT:
				LSL R6, R6, #8						//shift R6 by 8
     adc:	e1a06406 	lsl	r6, r6, #8
				LSL R3, R3, #1						//shift R3 by 1
     ae0:	e1a03083 	lsl	r3, r3, #1
				B FLOOD_LOOP_TWO
     ae4:	eafffff6 	b	ac4 <FLOOD_LOOP_TWO>

00000ae8 <FLOOD_END>:
				
FLOOD_END:	
				STR R5, [R1, #16]
     ae8:	e5815010 	str	r5, [r1, #16]
				BX LR
     aec:	e12fff1e 	bx	lr

00000af0 <HEX_write_ASM>:
				
HEX_write_ASM:
				
				MOV R2, #5  						//there are 6 hex
     af0:	e3a02005 	mov	r2, #5
				MOV R3, #1							//R3 store the digit to compare digit
     af4:	e3a03001 	mov	r3, #1
				LDR R7, =HEX_BASE
     af8:	e59f7130 	ldr	r7, [pc, #304]	; c30 <WRITE_END+0x8>
				LDR R5, [R7]
     afc:	e5975000 	ldr	r5, [r7]
				MOV R9, #127
     b00:	e3a0907f 	mov	r9, #127	; 0x7f

00000b04 <WRITE_SET_NUMBER>:
				
WRITE_SET_NUMBER:

				MOV R6, #63							//0
     b04:	e3a0603f 	mov	r6, #63	; 0x3f
				SUBS R1, R1, #0
     b08:	e2511000 	subs	r1, r1, #0
				BEQ WRITE_COPY
     b0c:	0a00002a 	beq	bbc <WRITE_COPY>
				MOV R6, #6							//1
     b10:	e3a06006 	mov	r6, #6
				SUBS R1, R1, #1
     b14:	e2511001 	subs	r1, r1, #1
				BEQ WRITE_COPY
     b18:	0a000027 	beq	bbc <WRITE_COPY>
				MOV R6, #91							//2
     b1c:	e3a0605b 	mov	r6, #91	; 0x5b
				SUBS R1, R1, #1
     b20:	e2511001 	subs	r1, r1, #1
				BEQ WRITE_COPY
     b24:	0a000024 	beq	bbc <WRITE_COPY>
				MOV R6, #79							//3
     b28:	e3a0604f 	mov	r6, #79	; 0x4f
				SUBS R1, R1, #1
     b2c:	e2511001 	subs	r1, r1, #1
				BEQ WRITE_COPY
     b30:	0a000021 	beq	bbc <WRITE_COPY>
				MOV R6, #102						//4
     b34:	e3a06066 	mov	r6, #102	; 0x66
				SUBS R1, R1, #1
     b38:	e2511001 	subs	r1, r1, #1
				BEQ WRITE_COPY
     b3c:	0a00001e 	beq	bbc <WRITE_COPY>
				MOV R6, #109						//5
     b40:	e3a0606d 	mov	r6, #109	; 0x6d
				SUBS R1, R1, #1
     b44:	e2511001 	subs	r1, r1, #1
				BEQ WRITE_COPY
     b48:	0a00001b 	beq	bbc <WRITE_COPY>
				MOV R6, #125						//6
     b4c:	e3a0607d 	mov	r6, #125	; 0x7d
				SUBS R1, R1, #1
     b50:	e2511001 	subs	r1, r1, #1
				BEQ WRITE_COPY
     b54:	0a000018 	beq	bbc <WRITE_COPY>
				MOV R6, #7							//7
     b58:	e3a06007 	mov	r6, #7
				SUBS R1, R1, #1
     b5c:	e2511001 	subs	r1, r1, #1
				BEQ WRITE_COPY			
     b60:	0a000015 	beq	bbc <WRITE_COPY>
				MOV R6, #127						//8
     b64:	e3a0607f 	mov	r6, #127	; 0x7f
				SUBS R1, R1, #1
     b68:	e2511001 	subs	r1, r1, #1
				BEQ WRITE_COPY
     b6c:	0a000012 	beq	bbc <WRITE_COPY>
				MOV R6, #111						//9
     b70:	e3a0606f 	mov	r6, #111	; 0x6f
				SUBS R1, R1, #1
     b74:	e2511001 	subs	r1, r1, #1
				BEQ WRITE_COPY
     b78:	0a00000f 	beq	bbc <WRITE_COPY>
				MOV R6, #119						//A
     b7c:	e3a06077 	mov	r6, #119	; 0x77
				SUBS R1, R1, #1
     b80:	e2511001 	subs	r1, r1, #1
				BEQ WRITE_COPY
     b84:	0a00000c 	beq	bbc <WRITE_COPY>
				MOV R6, #124						//B
     b88:	e3a0607c 	mov	r6, #124	; 0x7c
				SUBS R1, R1, #1
     b8c:	e2511001 	subs	r1, r1, #1
				BEQ WRITE_COPY
     b90:	0a000009 	beq	bbc <WRITE_COPY>
				MOV R6, #57							//C
     b94:	e3a06039 	mov	r6, #57	; 0x39
				SUBS R1, R1, #1
     b98:	e2511001 	subs	r1, r1, #1
				BEQ WRITE_COPY
     b9c:	0a000006 	beq	bbc <WRITE_COPY>
				MOV R6, #94							//D
     ba0:	e3a0605e 	mov	r6, #94	; 0x5e
				SUBS R1, R1, #1
     ba4:	e2511001 	subs	r1, r1, #1
				BEQ WRITE_COPY
     ba8:	0a000003 	beq	bbc <WRITE_COPY>
				MOV R6, #121						//E
     bac:	e3a06079 	mov	r6, #121	; 0x79
				SUBS R1, R1, #1
     bb0:	e2511001 	subs	r1, r1, #1
				BEQ WRITE_COPY
     bb4:	0a000000 	beq	bbc <WRITE_COPY>
				MOV R6, #113						//F
     bb8:	e3a06071 	mov	r6, #113	; 0x71

00000bbc <WRITE_COPY>:

WRITE_COPY:
				MOV R8, R6
     bbc:	e1a08006 	mov	r8, r6

00000bc0 <WRITE_LOOP_ONE>:
				
WRITE_LOOP_ONE:	
				SUBS R2, R2, #1     				//loop through array, from 4 to 0
     bc0:	e2522001 	subs	r2, r2, #1
				BEQ WRITE_INIT_TWO
     bc4:	0a000008 	beq	bec <WRITE_INIT_TWO>
				TST R0, R3							//R2 store the same value as digit
     bc8:	e1100003 	tst	r0, r3
				BEQ WRITE_LOOP_ONE_SHIFT			//if R2 is 0, turn do nothing go back to loop
     bcc:	0a000002 	beq	bdc <WRITE_LOOP_ONE_SHIFT>
				BIC R5, R5, R9	
     bd0:	e1c55009 	bic	r5, r5, r9
				ORR R5, R5, R6						//logic of write
     bd4:	e1855006 	orr	r5, r5, r6
				B WRITE_LOOP_ONE_SHIFT
     bd8:	eaffffff 	b	bdc <WRITE_LOOP_ONE_SHIFT>

00000bdc <WRITE_LOOP_ONE_SHIFT>:
				
WRITE_LOOP_ONE_SHIFT:
				LSL R6, R6, #8						//shift R6 by 8
     bdc:	e1a06406 	lsl	r6, r6, #8
				LSL R9, R9, #8						//shift R6 by 8
     be0:	e1a09409 	lsl	r9, r9, #8
				LSL R3, R3, #1						//shift R3 by 1
     be4:	e1a03083 	lsl	r3, r3, #1
				B WRITE_LOOP_ONE
     be8:	eafffff4 	b	bc0 <WRITE_LOOP_ONE>

00000bec <WRITE_INIT_TWO>:
			
WRITE_INIT_TWO:
				STR R5, [R7]
     bec:	e5875000 	str	r5, [r7]
				MOV R2, #3
     bf0:	e3a02003 	mov	r2, #3
				MOV R9, #127
     bf4:	e3a0907f 	mov	r9, #127	; 0x7f
				LDR R5, [R7, #16]
     bf8:	e5975010 	ldr	r5, [r7, #16]

00000bfc <WRITE_LOOP_TWO>:
				
WRITE_LOOP_TWO:	
				SUBS R2, R2, #1						//loop through array, from 4 TO 0
     bfc:	e2522001 	subs	r2, r2, #1
				BEQ WRITE_END
     c00:	0a000008 	beq	c28 <WRITE_END>
				TST R0, R3							//R2 store the same value as digit.
     c04:	e1100003 	tst	r0, r3
				BEQ WRITE_LOOP_TWO_SHIFT			//if R2 is 0, turn do nothing go back to loop
     c08:	0a000002 	beq	c18 <WRITE_LOOP_TWO_SHIFT>
				BIC R5, R5, R9	
     c0c:	e1c55009 	bic	r5, r5, r9
				ORR R5, R5, R8						//if R2 is not 0, flood the hex
     c10:	e1855008 	orr	r5, r5, r8
				B WRITE_LOOP_TWO_SHIFT
     c14:	eaffffff 	b	c18 <WRITE_LOOP_TWO_SHIFT>

00000c18 <WRITE_LOOP_TWO_SHIFT>:

WRITE_LOOP_TWO_SHIFT:
				LSL R8, R8, #8						//shift R6 by 8
     c18:	e1a08408 	lsl	r8, r8, #8
				LSL R9, R9, #8						//shift R6 by 8
     c1c:	e1a09409 	lsl	r9, r9, #8
				LSL R3, R3, #1						//shift R3 by 1
     c20:	e1a03083 	lsl	r3, r3, #1
				B WRITE_LOOP_TWO
     c24:	eafffff4 	b	bfc <WRITE_LOOP_TWO>

00000c28 <WRITE_END>:
				
WRITE_END:	
				STR R5, [R7, #16]
     c28:	e5875010 	str	r5, [r7, #16]
				BX LR
     c2c:	e12fff1e 	bx	lr
				.global HEX_write_ASM

HEX_clear_ASM:		
				MOV R2, #5  						//there are 6 hex
				MOV R3, #1							//R3 store the digit to compare digit
				LDR R1, =HEX_BASE
     c30:	ff200020 	.word	0xff200020

00000c34 <HPS_TIM_config_ASM>:
				.global HPS_TIM_config_ASM
				.global HPS_TIM_read_INT_ASM
				.global HPS_TIM_clear_INT_ASM

HPS_TIM_config_ASM:
				MOV R2, #1				//R2 store 1 
     c34:	e3a02001 	mov	r2, #1
				LDR R5, [R0]
     c38:	e5905000 	ldr	r5, [r0]
				TST R2, R5				//branch is is 0 for this clock
     c3c:	e1120005 	tst	r2, r5
				BEQ CONFIG_CLOCK2
     c40:	0a00000f 	beq	c84 <CONFIG_CLOCK2>

				LDR R1, =HPS_BASE1
     c44:	e59f1254 	ldr	r1, [pc, #596]	; ea0 <CLEAR_END+0x4>
				MOV R3, #0 				//for E control flag
     c48:	e3a03000 	mov	r3, #0
				STR R3, [R1, #8]  
     c4c:	e5813008 	str	r3, [r1, #8]
				MOV R6, #100
     c50:	e3a06064 	mov	r6, #100	; 0x64
				LDR R3, [R0, #4]
     c54:	e5903004 	ldr	r3, [r0, #4]
				MUL R3, R3, R6
     c58:	e0030693 	mul	r3, r3, r6
				STR R3, [R1]
     c5c:	e5813000 	str	r3, [r1]
				LDR R3, [R0, #12]		//get interrupt bit
     c60:	e590300c 	ldr	r3, [r0, #12]
				STR R3, [R1, #0x10]
     c64:	e5813010 	str	r3, [r1, #16]
				MOV	R3, #0		
     c68:	e3a03000 	mov	r3, #0
				LDR R4, [R0, #8]	
     c6c:	e5904008 	ldr	r4, [r0, #8]
				ORR R3, R3, R4 			//get manual bit
     c70:	e1833004 	orr	r3, r3, r4
				LSL R3, R3, #1
     c74:	e1a03083 	lsl	r3, r3, #1
				LDR R4, [R0, #16]
     c78:	e5904010 	ldr	r4, [r0, #16]
				ORR R3, R3, R4			//get enable bit*/
     c7c:	e1833004 	orr	r3, r3, r4
				STR R3, [R1, #8] 		//stroe control register	
     c80:	e5813008 	str	r3, [r1, #8]

00000c84 <CONFIG_CLOCK2>:

CONFIG_CLOCK2:
				LSL R2, R2, #1
     c84:	e1a02082 	lsl	r2, r2, #1
				TST R2, R5
     c88:	e1120005 	tst	r2, r5
				BEQ CONFIG_CLOCK3
     c8c:	0a00000f 	beq	cd0 <CONFIG_CLOCK3>

				LDR R1, =HPS_BASE2
     c90:	e59f120c 	ldr	r1, [pc, #524]	; ea4 <CLEAR_END+0x8>
				MOV R3, #0 				//for E control flag
     c94:	e3a03000 	mov	r3, #0
				STR R3, [R1, #8]  
     c98:	e5813008 	str	r3, [r1, #8]
				MOV R6, #100
     c9c:	e3a06064 	mov	r6, #100	; 0x64
				LDR R3, [R0, #4]
     ca0:	e5903004 	ldr	r3, [r0, #4]
				MUL R3, R3, R6
     ca4:	e0030693 	mul	r3, r3, r6
				STR R3, [R1]
     ca8:	e5813000 	str	r3, [r1]
				LDR R3, [R0, #12]		//get interrupt bit
     cac:	e590300c 	ldr	r3, [r0, #12]
				STR R3, [R1, #0x10]
     cb0:	e5813010 	str	r3, [r1, #16]
				MOV	R3, #0		
     cb4:	e3a03000 	mov	r3, #0
				LDR R4, [R0, #8]	
     cb8:	e5904008 	ldr	r4, [r0, #8]
				ORR R3, R3, R4 			//get manual bit
     cbc:	e1833004 	orr	r3, r3, r4
				LSL R3, R3, #1
     cc0:	e1a03083 	lsl	r3, r3, #1
				LDR R4, [R0, #16]
     cc4:	e5904010 	ldr	r4, [r0, #16]
				ORR R3, R3, R4			//get enable bit*/
     cc8:	e1833004 	orr	r3, r3, r4
				STR R3, [R1, #8] 		//stroe control register	
     ccc:	e5813008 	str	r3, [r1, #8]

00000cd0 <CONFIG_CLOCK3>:

CONFIG_CLOCK3:
				LSL R2, R2, #1
     cd0:	e1a02082 	lsl	r2, r2, #1
				TST R2, R5
     cd4:	e1120005 	tst	r2, r5
				BEQ CONFIG_CLOCK4
     cd8:	0a00000f 	beq	d1c <CONFIG_CLOCK4>

				LDR R1, =HPS_BASE3
     cdc:	e59f11c4 	ldr	r1, [pc, #452]	; ea8 <CLEAR_END+0xc>
				MOV R3, #0 				//for E control flag
     ce0:	e3a03000 	mov	r3, #0
				STR R3, [R1, #8]  
     ce4:	e5813008 	str	r3, [r1, #8]
				MOV R6, #25
     ce8:	e3a06019 	mov	r6, #25
				LDR R3, [R0, #4]
     cec:	e5903004 	ldr	r3, [r0, #4]
				MUL R3, R3, R6
     cf0:	e0030693 	mul	r3, r3, r6
				STR R3, [R1]
     cf4:	e5813000 	str	r3, [r1]
				LDR R3, [R0, #12]		//get interrupt bit
     cf8:	e590300c 	ldr	r3, [r0, #12]
				STR R3, [R1, #0x10]
     cfc:	e5813010 	str	r3, [r1, #16]
				MOV	R3, #0		
     d00:	e3a03000 	mov	r3, #0
				LDR R4, [R0, #8]	
     d04:	e5904008 	ldr	r4, [r0, #8]
				ORR R3, R3, R4 			//get manual bit
     d08:	e1833004 	orr	r3, r3, r4
				LSL R3, R3, #1
     d0c:	e1a03083 	lsl	r3, r3, #1
				LDR R4, [R0, #16]
     d10:	e5904010 	ldr	r4, [r0, #16]
				ORR R3, R3, R4			//get enable bit*/
     d14:	e1833004 	orr	r3, r3, r4
				STR R3, [R1, #8] 		//stroe control register	
     d18:	e5813008 	str	r3, [r1, #8]

00000d1c <CONFIG_CLOCK4>:

CONFIG_CLOCK4:
				LSL R2, R2, #1
     d1c:	e1a02082 	lsl	r2, r2, #1
				TST R2, R5
     d20:	e1120005 	tst	r2, r5
				BEQ CONFIG_END
     d24:	0a00000f 	beq	d68 <CONFIG_END>

				LDR R1, =HPS_BASE4
     d28:	e59f117c 	ldr	r1, [pc, #380]	; eac <CLEAR_END+0x10>
				MOV R3, #0 				//for E control flag
     d2c:	e3a03000 	mov	r3, #0
				STR R3, [R1, #8]  
     d30:	e5813008 	str	r3, [r1, #8]
				MOV R6, #25
     d34:	e3a06019 	mov	r6, #25
				LDR R3, [R0, #4]
     d38:	e5903004 	ldr	r3, [r0, #4]
				MUL R3, R3, R6
     d3c:	e0030693 	mul	r3, r3, r6
				STR R3, [R1]
     d40:	e5813000 	str	r3, [r1]
				LDR R3, [R0, #12]		//get interrupt bit
     d44:	e590300c 	ldr	r3, [r0, #12]
				STR R3, [R1, #0x10]
     d48:	e5813010 	str	r3, [r1, #16]
				MOV	R3, #0		
     d4c:	e3a03000 	mov	r3, #0
				LDR R4, [R0, #8]	
     d50:	e5904008 	ldr	r4, [r0, #8]
				ORR R3, R3, R4 			//get manual bit
     d54:	e1833004 	orr	r3, r3, r4
				LSL R3, R3, #1
     d58:	e1a03083 	lsl	r3, r3, #1
				LDR R4, [R0, #16]
     d5c:	e5904010 	ldr	r4, [r0, #16]
				ORR R3, R3, R4			//get enable bit*/
     d60:	e1833004 	orr	r3, r3, r4
				STR R3, [R1, #8] 		//stroe control register	
     d64:	e5813008 	str	r3, [r1, #8]

00000d68 <CONFIG_END>:

CONFIG_END:
				BX LR
     d68:	e12fff1e 	bx	lr

00000d6c <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
				MOV R3, #0				//R3 store result
     d6c:	e3a03000 	mov	r3, #0
				MOV R2, #1				//R2 store 1 
     d70:	e3a02001 	mov	r2, #1
				MOV R5, #1
     d74:	e3a05001 	mov	r5, #1
				TST R2, R0				//branch is is 0 for this clock
     d78:	e1120000 	tst	r2, r0
				BEQ READ_CLOCK2
     d7c:	0a000003 	beq	d90 <READ_CLOCK2>

				LDR R1, =HPS_BASE1
     d80:	e59f1118 	ldr	r1, [pc, #280]	; ea0 <CLEAR_END+0x4>
				LDR R4, [R1, #0x10]
     d84:	e5914010 	ldr	r4, [r1, #16]
				AND R0, R4, R5
     d88:	e0040005 	and	r0, r4, r5
				B READ_END
     d8c:	ea000014 	b	de4 <READ_END>

00000d90 <READ_CLOCK2>:
				
READ_CLOCK2:		
				LSL R2, R2, #1
     d90:	e1a02082 	lsl	r2, r2, #1
				TST R2, R0
     d94:	e1120000 	tst	r2, r0
				BEQ READ_CLOCK3
     d98:	0a000003 	beq	dac <READ_CLOCK3>

				LDR R1, =HPS_BASE2
     d9c:	e59f1100 	ldr	r1, [pc, #256]	; ea4 <CLEAR_END+0x8>
				LDR R4, [R1, #0x10]
     da0:	e5914010 	ldr	r4, [r1, #16]
				AND R0, R4, R5
     da4:	e0040005 	and	r0, r4, r5
				B READ_END
     da8:	ea00000d 	b	de4 <READ_END>

00000dac <READ_CLOCK3>:

READ_CLOCK3:		
				LSL R2, R2, #1
     dac:	e1a02082 	lsl	r2, r2, #1
				TST R2, R0
     db0:	e1120000 	tst	r2, r0
				BEQ READ_CLOCK4
     db4:	0a000003 	beq	dc8 <READ_CLOCK4>

				LDR R1, =HPS_BASE3
     db8:	e59f10e8 	ldr	r1, [pc, #232]	; ea8 <CLEAR_END+0xc>
				LDR R4, [R1, #0x10]
     dbc:	e5914010 	ldr	r4, [r1, #16]
				AND R0, R4, R5
     dc0:	e0040005 	and	r0, r4, r5
				B READ_END
     dc4:	ea000006 	b	de4 <READ_END>

00000dc8 <READ_CLOCK4>:

READ_CLOCK4:		
				LSL R2, R2, #1
     dc8:	e1a02082 	lsl	r2, r2, #1
				TST R2, R0
     dcc:	e1120000 	tst	r2, r0
				BEQ READ_END
     dd0:	0a000003 	beq	de4 <READ_END>

				LDR R1, =HPS_BASE4
     dd4:	e59f10d0 	ldr	r1, [pc, #208]	; eac <CLEAR_END+0x10>
				LDR R4, [R1, #0x10]
     dd8:	e5914010 	ldr	r4, [r1, #16]
				AND R0, R4, R5
     ddc:	e0040005 	and	r0, r4, r5
				B READ_END
     de0:	eaffffff 	b	de4 <READ_END>

00000de4 <READ_END>:

READ_END:
				BX LR
     de4:	e12fff1e 	bx	lr

00000de8 <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
				MOV R3, #0				//R3 store 0
     de8:	e3a03000 	mov	r3, #0
				MOV R2, #1				//R2 store 1 
     dec:	e3a02001 	mov	r2, #1
				TST R2, R0				//branch is is 0 for this clock
     df0:	e1120000 	tst	r2, r0
				BEQ CLEAR_CLOCK2
     df4:	0a000007 	beq	e18 <CLEAR_CLOCK2>

				LDR R1, =HPS_BASE1
     df8:	e59f10a0 	ldr	r1, [pc, #160]	; ea0 <CLEAR_END+0x4>
				LDR R4, [R1, #8]
     dfc:	e5914008 	ldr	r4, [r1, #8]
				MOV R5, #1
     e00:	e3a05001 	mov	r5, #1
				BIC R5, R4, R5
     e04:	e1c45005 	bic	r5, r4, r5
				STR R5, [R1, #8]
     e08:	e5815008 	str	r5, [r1, #8]
				STR R3, [R1, #0xC]
     e0c:	e581300c 	str	r3, [r1, #12]
				STR R3, [R1, #0x10]
     e10:	e5813010 	str	r3, [r1, #16]
				STR R4, [R1, #8]
     e14:	e5814008 	str	r4, [r1, #8]

00000e18 <CLEAR_CLOCK2>:
				
				
CLEAR_CLOCK2:		
				LSL R2, R2, #1
     e18:	e1a02082 	lsl	r2, r2, #1
				TST R2, R0
     e1c:	e1120000 	tst	r2, r0
				BEQ CLEAR_CLOCK3
     e20:	0a000007 	beq	e44 <CLEAR_CLOCK3>

				LDR R1, =HPS_BASE2
     e24:	e59f1078 	ldr	r1, [pc, #120]	; ea4 <CLEAR_END+0x8>
				LDR R4, [R1, #8]
     e28:	e5914008 	ldr	r4, [r1, #8]
				MOV R5, #1
     e2c:	e3a05001 	mov	r5, #1
				BIC R5, R4, R5
     e30:	e1c45005 	bic	r5, r4, r5
				STR R5, [R1, #8]
     e34:	e5815008 	str	r5, [r1, #8]
				STR R3, [R1, #0xC]
     e38:	e581300c 	str	r3, [r1, #12]
				STR R3, [R1, #0x10]
     e3c:	e5813010 	str	r3, [r1, #16]
				STR R4, [R1, #8]
     e40:	e5814008 	str	r4, [r1, #8]

00000e44 <CLEAR_CLOCK3>:

CLEAR_CLOCK3:		
				LSL R2, R2, #1
     e44:	e1a02082 	lsl	r2, r2, #1
				TST R2, R0
     e48:	e1120000 	tst	r2, r0
				BEQ CLEAR_CLOCK4
     e4c:	0a000007 	beq	e70 <CLEAR_CLOCK4>

				LDR R1, =HPS_BASE3
     e50:	e59f1050 	ldr	r1, [pc, #80]	; ea8 <CLEAR_END+0xc>
				LDR R4, [R1, #8]
     e54:	e5914008 	ldr	r4, [r1, #8]
				MOV R5, #1
     e58:	e3a05001 	mov	r5, #1
				BIC R5, R4, R5
     e5c:	e1c45005 	bic	r5, r4, r5
				STR R5, [R1, #8]
     e60:	e5815008 	str	r5, [r1, #8]
				STR R3, [R1, #0xC]
     e64:	e581300c 	str	r3, [r1, #12]
				STR R3, [R1, #0x10]
     e68:	e5813010 	str	r3, [r1, #16]
				STR R4, [R1, #8]
     e6c:	e5814008 	str	r4, [r1, #8]

00000e70 <CLEAR_CLOCK4>:

CLEAR_CLOCK4:		
				LSL R2, R2, #1
     e70:	e1a02082 	lsl	r2, r2, #1
				TST R2, R0
     e74:	e1120000 	tst	r2, r0
				BEQ CLEAR_END
     e78:	0a000007 	beq	e9c <CLEAR_END>

				LDR R1, =HPS_BASE4
     e7c:	e59f1028 	ldr	r1, [pc, #40]	; eac <CLEAR_END+0x10>
				LDR R4, [R1, #8]
     e80:	e5914008 	ldr	r4, [r1, #8]
				MOV R5, #1
     e84:	e3a05001 	mov	r5, #1
				BIC R5, R4, R5
     e88:	e1c45005 	bic	r5, r4, r5
				STR R5, [R1, #8]
     e8c:	e5815008 	str	r5, [r1, #8]
				STR R3, [R1, #0xC]
     e90:	e581300c 	str	r3, [r1, #12]
				STR R3, [R1, #0x10]
     e94:	e5813010 	str	r3, [r1, #16]
				STR R4, [R1, #8]
     e98:	e5814008 	str	r4, [r1, #8]

00000e9c <CLEAR_END>:

CLEAR_END:
				BX LR
     e9c:	e12fff1e 	bx	lr
				MOV R2, #1				//R2 store 1 
				LDR R5, [R0]
				TST R2, R5				//branch is is 0 for this clock
				BEQ CONFIG_CLOCK2

				LDR R1, =HPS_BASE1
     ea0:	ffc08000 	.word	0xffc08000
CONFIG_CLOCK2:
				LSL R2, R2, #1
				TST R2, R5
				BEQ CONFIG_CLOCK3

				LDR R1, =HPS_BASE2
     ea4:	ffc09000 	.word	0xffc09000
CONFIG_CLOCK3:
				LSL R2, R2, #1
				TST R2, R5
				BEQ CONFIG_CLOCK4

				LDR R1, =HPS_BASE3
     ea8:	ffd00000 	.word	0xffd00000
CONFIG_CLOCK4:
				LSL R2, R2, #1
				TST R2, R5
				BEQ CONFIG_END

				LDR R1, =HPS_BASE4
     eac:	ffd01000 	.word	0xffd01000

00000eb0 <hps_tim0_int_flag>:
     eb0:	00000000 	.word	0x00000000

00000eb4 <A9_PRIV_TIM_ISR>:

hps_tim0_int_flag:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     eb4:	e12fff1e 	bx	lr

00000eb8 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     eb8:	e12fff1e 	bx	lr

00000ebc <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     ebc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1
     ec0:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM
     ec4:	ebffffc7 	bl	de8 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag
     ec8:	e59f004c 	ldr	r0, [pc, #76]	; f1c <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     ecc:	e3a01001 	mov	r1, #1
	STR R1, [R0]
     ed0:	e5801000 	str	r1, [r0]

	POP {LR}
     ed4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     ed8:	e12fff1e 	bx	lr

00000edc <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     edc:	e12fff1e 	bx	lr

00000ee0 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     ee0:	e12fff1e 	bx	lr

00000ee4 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     ee4:	e12fff1e 	bx	lr

00000ee8 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     ee8:	e12fff1e 	bx	lr

00000eec <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}
     eec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #15
     ef0:	e3a0000f 	mov	r0, #15
	BL enable_PB_INT_ASM
     ef4:	eb000020 	bl	f7c <enable_PB_INT_ASM>

	POP {LR}
     ef8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     efc:	e12fff1e 	bx	lr

00000f00 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     f00:	e12fff1e 	bx	lr

00000f04 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     f04:	e12fff1e 	bx	lr

00000f08 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     f08:	e12fff1e 	bx	lr

00000f0c <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     f0c:	e12fff1e 	bx	lr

00000f10 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     f10:	e12fff1e 	bx	lr

00000f14 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     f14:	e12fff1e 	bx	lr

00000f18 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     f18:	e12fff1e 	bx	lr
	PUSH {LR}
	
	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM

	LDR R0, =hps_tim0_int_flag
     f1c:	00000eb0 	.word	0x00000eb0

00000f20 <read_PB_data_ASM>:
				.global PB_clear_edgecap_ASM
				.global enable_PB_INT_ASM
				.global disable_PB_INT_ASM

read_PB_data_ASM:
				LDR R1, =BUTTON_BASE
     f20:	e59f107c 	ldr	r1, [pc, #124]	; fa4 <disable_PB_INT_ASM+0x14>
				MOV R2, #15
     f24:	e3a0200f 	mov	r2, #15
				LDR R0, [R1]
     f28:	e5910000 	ldr	r0, [r1]
				AND R0, R0, R2
     f2c:	e0000002 	and	r0, r0, r2
				BX LR
     f30:	e12fff1e 	bx	lr

00000f34 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
				LDR R1, =BUTTON_BASE
     f34:	e59f1068 	ldr	r1, [pc, #104]	; fa4 <disable_PB_INT_ASM+0x14>
				LDR R2, [R1]
     f38:	e5912000 	ldr	r2, [r1]
				AND R0, R0, R2
     f3c:	e0000002 	and	r0, r0, r2
				BX LR
     f40:	e12fff1e 	bx	lr

00000f44 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
				LDR R1, =EDGE_BASE
     f44:	e59f105c 	ldr	r1, [pc, #92]	; fa8 <disable_PB_INT_ASM+0x18>
				MOV R2, #15
     f48:	e3a0200f 	mov	r2, #15
				LDR R0, [R1]
     f4c:	e5910000 	ldr	r0, [r1]
				AND R0, R0, R2
     f50:	e0000002 	and	r0, r0, r2
				BX LR
     f54:	e12fff1e 	bx	lr

00000f58 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
				LDR R1, =EDGE_BASE
     f58:	e59f1048 	ldr	r1, [pc, #72]	; fa8 <disable_PB_INT_ASM+0x18>
				LDR R2, [R1]
     f5c:	e5912000 	ldr	r2, [r1]
				AND R0, R0, R2
     f60:	e0000002 	and	r0, r0, r2
				BX LR
     f64:	e12fff1e 	bx	lr

00000f68 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:
				LDR R1, =EDGE_BASE
     f68:	e59f1038 	ldr	r1, [pc, #56]	; fa8 <disable_PB_INT_ASM+0x18>
				LDR R2, [R1]
     f6c:	e5912000 	ldr	r2, [r1]
				BIC R0, R2, R0
     f70:	e1c20000 	bic	r0, r2, r0
				STR R0, [R1]
     f74:	e5810000 	str	r0, [r1]
				BX LR
     f78:	e12fff1e 	bx	lr

00000f7c <enable_PB_INT_ASM>:

enable_PB_INT_ASM:
				LDR R1, =MASK_BASE
     f7c:	e59f1028 	ldr	r1, [pc, #40]	; fac <disable_PB_INT_ASM+0x1c>
				LDR R2, [R1]
     f80:	e5912000 	ldr	r2, [r1]
				AND R0, R2, R0
     f84:	e0020000 	and	r0, r2, r0
				STR R0, [R1]
     f88:	e5810000 	str	r0, [r1]
				BX LR
     f8c:	e12fff1e 	bx	lr

00000f90 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
				LDR R1, =MASK_BASE
     f90:	e59f1014 	ldr	r1, [pc, #20]	; fac <disable_PB_INT_ASM+0x1c>
				LDR R2, [R1]
     f94:	e5912000 	ldr	r2, [r1]
				BIC R0, R2, R0
     f98:	e1c20000 	bic	r0, r2, r0
				STR R0, [R1]
     f9c:	e5810000 	str	r0, [r1]
				BX LR
     fa0:	e12fff1e 	bx	lr
				.global PB_clear_edgecap_ASM
				.global enable_PB_INT_ASM
				.global disable_PB_INT_ASM

read_PB_data_ASM:
				LDR R1, =BUTTON_BASE
     fa4:	ff200050 	.word	0xff200050
				LDR R2, [R1]
				AND R0, R0, R2
				BX LR

read_PB_edgecap_ASM:
				LDR R1, =EDGE_BASE
     fa8:	ff20005c 	.word	0xff20005c
				BIC R0, R2, R0
				STR R0, [R1]
				BX LR

enable_PB_INT_ASM:
				LDR R1, =MASK_BASE
     fac:	ff200058 	.word	0xff200058

00000fb0 <atexit>:
     fb0:	e1a01000 	mov	r1, r0
     fb4:	e3a00000 	mov	r0, #0
     fb8:	e92d4008 	push	{r3, lr}
     fbc:	e1a02000 	mov	r2, r0
     fc0:	e1a03000 	mov	r3, r0
     fc4:	eb00000e 	bl	1004 <__register_exitproc>
     fc8:	e8bd4008 	pop	{r3, lr}
     fcc:	e12fff1e 	bx	lr

00000fd0 <exit>:
     fd0:	e92d4008 	push	{r3, lr}
     fd4:	e3a01000 	mov	r1, #0
     fd8:	e1a04000 	mov	r4, r0
     fdc:	eb000045 	bl	10f8 <__call_exitprocs>
     fe0:	e59f3018 	ldr	r3, [pc, #24]	; 1000 <exit+0x30>
     fe4:	e5930000 	ldr	r0, [r3]
     fe8:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     fec:	e3530000 	cmp	r3, #0
     ff0:	11a0e00f 	movne	lr, pc
     ff4:	112fff13 	bxne	r3
     ff8:	e1a00004 	mov	r0, r4
     ffc:	eb0000c9 	bl	1328 <_exit>
    1000:	000013d8 	.word	0x000013d8

00001004 <__register_exitproc>:
    1004:	e59fc0e4 	ldr	r12, [pc, #228]	; 10f0 <__register_exitproc+0xec>
    1008:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    100c:	e59c4000 	ldr	r4, [r12]
    1010:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1014:	e35c0000 	cmp	r12, #0
    1018:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    101c:	e59c5004 	ldr	r5, [r12, #4]
    1020:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1024:	e355001f 	cmp	r5, #31
    1028:	e24dd010 	sub	sp, sp, #16
    102c:	e1a06000 	mov	r6, r0
    1030:	da000015 	ble	108c <__register_exitproc+0x88>
    1034:	e59f00b8 	ldr	r0, [pc, #184]	; 10f4 <__register_exitproc+0xf0>
    1038:	e3500000 	cmp	r0, #0
    103c:	1a000001 	bne	1048 <__register_exitproc+0x44>
    1040:	e3e00000 	mvn	r0, #0
    1044:	ea000018 	b	10ac <__register_exitproc+0xa8>
    1048:	e3a00e19 	mov	r0, #400	; 0x190
    104c:	e58d100c 	str	r1, [sp, #12]
    1050:	e58d2008 	str	r2, [sp, #8]
    1054:	e58d3004 	str	r3, [sp, #4]
    1058:	e320f000 	nop	{0}
    105c:	e250c000 	subs	r12, r0, #0
    1060:	e59d100c 	ldr	r1, [sp, #12]
    1064:	e59d2008 	ldr	r2, [sp, #8]
    1068:	e59d3004 	ldr	r3, [sp, #4]
    106c:	0afffff3 	beq	1040 <__register_exitproc+0x3c>
    1070:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1074:	e3a00000 	mov	r0, #0
    1078:	e58c0004 	str	r0, [r12, #4]
    107c:	e58c5000 	str	r5, [r12]
    1080:	e584c148 	str	r12, [r4, #328]	; 0x148
    1084:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1088:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    108c:	e3560000 	cmp	r6, #0
    1090:	e59c4004 	ldr	r4, [r12, #4]
    1094:	1a000007 	bne	10b8 <__register_exitproc+0xb4>
    1098:	e2843002 	add	r3, r4, #2
    109c:	e2844001 	add	r4, r4, #1
    10a0:	e78c1103 	str	r1, [r12, r3, lsl #2]
    10a4:	e58c4004 	str	r4, [r12, #4]
    10a8:	e3a00000 	mov	r0, #0
    10ac:	e28dd010 	add	sp, sp, #16
    10b0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    10b4:	e12fff1e 	bx	lr
    10b8:	e3a00001 	mov	r0, #1
    10bc:	e1a00410 	lsl	r0, r0, r4
    10c0:	e08c8104 	add	r8, r12, r4, lsl #2
    10c4:	e3560002 	cmp	r6, #2
    10c8:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    10cc:	e5883108 	str	r3, [r8, #264]	; 0x108
    10d0:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    10d4:	e1877000 	orr	r7, r7, r0
    10d8:	01830000 	orreq	r0, r3, r0
    10dc:	e1a05008 	mov	r5, r8
    10e0:	e5882088 	str	r2, [r8, #136]	; 0x88
    10e4:	e58c7188 	str	r7, [r12, #392]	; 0x188
    10e8:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    10ec:	eaffffe9 	b	1098 <__register_exitproc+0x94>
    10f0:	000013d8 	.word	0x000013d8
    10f4:	00000000 	.word	0x00000000

000010f8 <__call_exitprocs>:
    10f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    10fc:	e59f3168 	ldr	r3, [pc, #360]	; 126c <__call_exitprocs+0x174>
    1100:	e5933000 	ldr	r3, [r3]
    1104:	e24dd014 	sub	sp, sp, #20
    1108:	e58d3004 	str	r3, [sp, #4]
    110c:	e2833f52 	add	r3, r3, #328	; 0x148
    1110:	e58d0008 	str	r0, [sp, #8]
    1114:	e58d300c 	str	r3, [sp, #12]
    1118:	e1a07001 	mov	r7, r1
    111c:	e3a08001 	mov	r8, #1
    1120:	e59d3004 	ldr	r3, [sp, #4]
    1124:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1128:	e3560000 	cmp	r6, #0
    112c:	e59db00c 	ldr	r11, [sp, #12]
    1130:	0a000033 	beq	1204 <__call_exitprocs+0x10c>
    1134:	e5965004 	ldr	r5, [r6, #4]
    1138:	e2554001 	subs	r4, r5, #1
    113c:	5286a088 	addpl	r10, r6, #136	; 0x88
    1140:	5285501f 	addpl	r5, r5, #31
    1144:	508a5105 	addpl	r5, r10, r5, lsl #2
    1148:	5a000007 	bpl	116c <__call_exitprocs+0x74>
    114c:	ea000029 	b	11f8 <__call_exitprocs+0x100>
    1150:	e5953000 	ldr	r3, [r5]
    1154:	e1530007 	cmp	r3, r7
    1158:	0a000005 	beq	1174 <__call_exitprocs+0x7c>
    115c:	e2444001 	sub	r4, r4, #1
    1160:	e3740001 	cmn	r4, #1
    1164:	e2455004 	sub	r5, r5, #4
    1168:	0a000022 	beq	11f8 <__call_exitprocs+0x100>
    116c:	e3570000 	cmp	r7, #0
    1170:	1afffff6 	bne	1150 <__call_exitprocs+0x58>
    1174:	e5963004 	ldr	r3, [r6, #4]
    1178:	e06a2005 	rsb	r2, r10, r5
    117c:	e2433001 	sub	r3, r3, #1
    1180:	e0862002 	add	r2, r6, r2
    1184:	e1530004 	cmp	r3, r4
    1188:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    118c:	13a01000 	movne	r1, #0
    1190:	05864004 	streq	r4, [r6, #4]
    1194:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1198:	e3530000 	cmp	r3, #0
    119c:	0affffee 	beq	115c <__call_exitprocs+0x64>
    11a0:	e1a02418 	lsl	r2, r8, r4
    11a4:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    11a8:	e1120001 	tst	r2, r1
    11ac:	e5969004 	ldr	r9, [r6, #4]
    11b0:	0a000016 	beq	1210 <__call_exitprocs+0x118>
    11b4:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    11b8:	e1120001 	tst	r2, r1
    11bc:	1a000016 	bne	121c <__call_exitprocs+0x124>
    11c0:	e59d0008 	ldr	r0, [sp, #8]
    11c4:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    11c8:	e1a0e00f 	mov	lr, pc
    11cc:	e12fff13 	bx	r3
    11d0:	e5963004 	ldr	r3, [r6, #4]
    11d4:	e1530009 	cmp	r3, r9
    11d8:	1affffd0 	bne	1120 <__call_exitprocs+0x28>
    11dc:	e59b3000 	ldr	r3, [r11]
    11e0:	e1530006 	cmp	r3, r6
    11e4:	1affffcd 	bne	1120 <__call_exitprocs+0x28>
    11e8:	e2444001 	sub	r4, r4, #1
    11ec:	e3740001 	cmn	r4, #1
    11f0:	e2455004 	sub	r5, r5, #4
    11f4:	1affffdc 	bne	116c <__call_exitprocs+0x74>
    11f8:	e59f1070 	ldr	r1, [pc, #112]	; 1270 <__call_exitprocs+0x178>
    11fc:	e3510000 	cmp	r1, #0
    1200:	1a000009 	bne	122c <__call_exitprocs+0x134>
    1204:	e28dd014 	add	sp, sp, #20
    1208:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    120c:	e12fff1e 	bx	lr
    1210:	e1a0e00f 	mov	lr, pc
    1214:	e12fff13 	bx	r3
    1218:	eaffffec 	b	11d0 <__call_exitprocs+0xd8>
    121c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1220:	e1a0e00f 	mov	lr, pc
    1224:	e12fff13 	bx	r3
    1228:	eaffffe8 	b	11d0 <__call_exitprocs+0xd8>
    122c:	e5963004 	ldr	r3, [r6, #4]
    1230:	e3530000 	cmp	r3, #0
    1234:	e5963000 	ldr	r3, [r6]
    1238:	1a000008 	bne	1260 <__call_exitprocs+0x168>
    123c:	e3530000 	cmp	r3, #0
    1240:	0a000006 	beq	1260 <__call_exitprocs+0x168>
    1244:	e1a00006 	mov	r0, r6
    1248:	e58b3000 	str	r3, [r11]
    124c:	e320f000 	nop	{0}
    1250:	e59b6000 	ldr	r6, [r11]
    1254:	e3560000 	cmp	r6, #0
    1258:	1affffb5 	bne	1134 <__call_exitprocs+0x3c>
    125c:	eaffffe8 	b	1204 <__call_exitprocs+0x10c>
    1260:	e1a0b006 	mov	r11, r6
    1264:	e1a06003 	mov	r6, r3
    1268:	eafffff9 	b	1254 <__call_exitprocs+0x15c>
    126c:	000013d8 	.word	0x000013d8
    1270:	00000000 	.word	0x00000000

00001274 <register_fini>:
    1274:	e92d4008 	push	{r3, lr}
    1278:	e59f3010 	ldr	r3, [pc, #16]	; 1290 <register_fini+0x1c>
    127c:	e3530000 	cmp	r3, #0
    1280:	159f000c 	ldrne	r0, [pc, #12]	; 1294 <register_fini+0x20>
    1284:	1bffff49 	blne	fb0 <atexit>
    1288:	e8bd4008 	pop	{r3, lr}
    128c:	e12fff1e 	bx	lr
    1290:	00001400 	.word	0x00001400
    1294:	00001298 	.word	0x00001298

00001298 <__libc_fini_array>:
    1298:	e92d4038 	push	{r3, r4, r5, lr}
    129c:	e59f5030 	ldr	r5, [pc, #48]	; 12d4 <__libc_fini_array+0x3c>
    12a0:	e59f4030 	ldr	r4, [pc, #48]	; 12d8 <__libc_fini_array+0x40>
    12a4:	e0654004 	rsb	r4, r5, r4
    12a8:	e1b04144 	asrs	r4, r4, #2
    12ac:	10855104 	addne	r5, r5, r4, lsl #2
    12b0:	0a000004 	beq	12c8 <__libc_fini_array+0x30>
    12b4:	e5353004 	ldr	r3, [r5, #-4]!
    12b8:	e1a0e00f 	mov	lr, pc
    12bc:	e12fff13 	bx	r3
    12c0:	e2544001 	subs	r4, r4, #1
    12c4:	1afffffa 	bne	12b4 <__libc_fini_array+0x1c>
    12c8:	eb00004c 	bl	1400 <__libc_fini>
    12cc:	e8bd4038 	pop	{r3, r4, r5, lr}
    12d0:	e12fff1e 	bx	lr
    12d4:	00001418 	.word	0x00001418
    12d8:	0000141c 	.word	0x0000141c

000012dc <__cs3_premain>:
    12dc:	e92d4008 	push	{r3, lr}
    12e0:	eb000017 	bl	1344 <__libc_init_array>
    12e4:	e59f3030 	ldr	r3, [pc, #48]	; 131c <__cs3_premain+0x40>
    12e8:	e3530000 	cmp	r3, #0
    12ec:	15930000 	ldrne	r0, [r3]
    12f0:	01a00003 	moveq	r0, r3
    12f4:	e59f3024 	ldr	r3, [pc, #36]	; 1320 <__cs3_premain+0x44>
    12f8:	e3530000 	cmp	r3, #0
    12fc:	15931000 	ldrne	r1, [r3]
    1300:	01a01003 	moveq	r1, r3
    1304:	e3a02000 	mov	r2, #0
    1308:	ebfffbd3 	bl	25c <main>
    130c:	e59f3010 	ldr	r3, [pc, #16]	; 1324 <__cs3_premain+0x48>
    1310:	e3530000 	cmp	r3, #0
    1314:	1bffff2d 	blne	fd0 <exit>
    1318:	eafffffe 	b	1318 <__cs3_premain+0x3c>
	...
    1324:	00000fd0 	.word	0x00000fd0

00001328 <_exit>:
    1328:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    132c:	e3a00018 	mov	r0, #24
    1330:	e59f1004 	ldr	r1, [pc, #4]	; 133c <_exit+0x14>
    1334:	ef123456 	svc	0x00123456
    1338:	eafffffe 	b	1338 <_exit+0x10>
    133c:	00020026 	.word	0x00020026

00001340 <__cs3_isr_interrupt>:
    1340:	eafffffe 	b	1340 <__cs3_isr_interrupt>

00001344 <__libc_init_array>:
    1344:	e92d4070 	push	{r4, r5, r6, lr}
    1348:	e59f506c 	ldr	r5, [pc, #108]	; 13bc <__libc_init_array+0x78>
    134c:	e59f606c 	ldr	r6, [pc, #108]	; 13c0 <__libc_init_array+0x7c>
    1350:	e0656006 	rsb	r6, r5, r6
    1354:	e1b06146 	asrs	r6, r6, #2
    1358:	12455004 	subne	r5, r5, #4
    135c:	13a04000 	movne	r4, #0
    1360:	0a000005 	beq	137c <__libc_init_array+0x38>
    1364:	e5b53004 	ldr	r3, [r5, #4]!
    1368:	e2844001 	add	r4, r4, #1
    136c:	e1a0e00f 	mov	lr, pc
    1370:	e12fff13 	bx	r3
    1374:	e1560004 	cmp	r6, r4
    1378:	1afffff9 	bne	1364 <__libc_init_array+0x20>
    137c:	e59f5040 	ldr	r5, [pc, #64]	; 13c4 <__libc_init_array+0x80>
    1380:	e59f6040 	ldr	r6, [pc, #64]	; 13c8 <__libc_init_array+0x84>
    1384:	e0656006 	rsb	r6, r5, r6
    1388:	eb000014 	bl	13e0 <_init>
    138c:	e1b06146 	asrs	r6, r6, #2
    1390:	12455004 	subne	r5, r5, #4
    1394:	13a04000 	movne	r4, #0
    1398:	0a000005 	beq	13b4 <__libc_init_array+0x70>
    139c:	e5b53004 	ldr	r3, [r5, #4]!
    13a0:	e2844001 	add	r4, r4, #1
    13a4:	e1a0e00f 	mov	lr, pc
    13a8:	e12fff13 	bx	r3
    13ac:	e1560004 	cmp	r6, r4
    13b0:	1afffff9 	bne	139c <__libc_init_array+0x58>
    13b4:	e8bd4070 	pop	{r4, r5, r6, lr}
    13b8:	e12fff1e 	bx	lr
    13bc:	000013f8 	.word	0x000013f8
    13c0:	000013f8 	.word	0x000013f8
    13c4:	000013f8 	.word	0x000013f8
    13c8:	00001400 	.word	0x00001400

Disassembly of section .rodata:

000013d0 <_global_impure_ptr-0x8>:
    13d0:	00000049 	.word	0x00000049
    13d4:	000000c7 	.word	0x000000c7

000013d8 <_global_impure_ptr>:
    13d8:	00001440 00000043                       @...C...

000013e0 <_init>:
    13e0:	e1a0c00d 	mov	r12, sp
    13e4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    13e8:	e24cb004 	sub	r11, r12, #4
    13ec:	e24bd028 	sub	sp, r11, #40	; 0x28
    13f0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    13f4:	e12fff1e 	bx	lr

000013f8 <__init_array_start>:
    13f8:	00001274 	.word	0x00001274

000013fc <__frame_dummy_init_array_entry>:
    13fc:	00000208                                ....

00001400 <__libc_fini>:
    1400:	e1a0c00d 	mov	r12, sp
    1404:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1408:	e24cb004 	sub	r11, r12, #4
    140c:	e24bd028 	sub	sp, r11, #40	; 0x28
    1410:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1414:	e12fff1e 	bx	lr

00001418 <__fini_array_start>:
    1418:	000001c4 	.word	0x000001c4

0000141c <__cs3_regions>:
    141c:	00000000 	.word	0x00000000
    1420:	00000040 	.word	0x00000040
    1424:	00000040 	.word	0x00000040
    1428:	00001830 	.word	0x00001830
    142c:	00000020 	.word	0x00000020
